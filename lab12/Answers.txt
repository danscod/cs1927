Week 11 Lab
Dan Scodellaro & Ambrose Hill
Task 2 Questions & Answers

References:
http://primes.utm.edu/lists/small/10000.txt
http://webapps.cse.unsw.edu.au/webcms2/course/index.php?cid=2359&color=gray

QUESTIONS #######################################################

Question A
The dict3 file has roughly 98,000 words in it. What is the maximum chain length if a hash table size of 9803 is used? How does the chain length distribution change if the hash table size is 16249? 16383 (i.e. 214-1)? 16384 (i.e. 214)? 20000? 29959?

Question B
What would be a suitable hash table size that keeps the maximum chain length under 10, and has most chains with length 1 or 2?

Question C
Examine the profile for the words program for a number of the above table sizes. What are the most costly functions (in terms of overall time)?

Question D
Suggest how the individual functions might be improved. Suggest how the overall performance might be improved.

Question E
Implement your suggestions and then give a new profile to show the improvement, and explain how the profile shows the improvement.

ANSWERS #########################################################

Answer A
By running "./words dict3 9803", we can see that the maximum chain length is 27. Similarly, the max lengths for the other values are as follows (example in APPENDIX A):
9803 = 27
16249 = 17
16383 = 44
16384 = 22
20000 = 91
29959 = 12

Answer B
Running "./words dict3 41879" gave a max chain length of 10 and kept majority of chains in a length of 2 or less (example in APPENDIX B). While there may a smaller value that achieves the same small chain length and distribution, one would need to write a separate program to test all such possible values.

Answer C
(See APPENDIX C) Without question, the hash function is the mostly costly part of the entire program. Hash represents 75% of the runtime, and each function call is 0.12ms (12x the next longest call). It is not the most called function (that is cmp()), but it is the 2nd most called. cmp() by comparison is trivially fast.

Answer D
There are a couple of options available for speeding up the program and it's functions. The biggest speed-barrier is hash(), and so improving the speed of that would have a huge impact on the performance of the whole program. With regards to hash() specifically, there are simpler hash() algorithms (e.g. key % 11); but these introduce their own problems of collision. As "Key"s are stored as Strings, the function could be sped up by manipulating 4 characters (the length of an int) at a time (as shown in tutorials), but this is difficult to implement. Of course, performance could be improved overall via multi-threading or implementation in a different programming language (such as Haskell), but that is well beyond the scope of this course.

Answer E
Taking a look at APPENDIX E, the has function has been simplified leading to a major change in gprof's output. hash() now only takes 0.04ms (1/3 the old time), accounting for 33% of the total runtime. If we compare the cumulative runtime between the old hash() and the new one, we have reduced the runtime from 0.16ms to 0.12ms, a 25% improvement for one line of code. However, it's important to note that the new hash function may be slower given certain scenarios and inputs (it should be "inferior" as a hash generator, yielding more collisions).

APPENDIX ########################################################

APPENDIX A
weill % ./words dict3 9803
Reading words from dict3
Hash Table Stats:
Number of slots = 9803
Number of items = 98099
Chains
 Length    Freq
Max chain length:27
      0       1
      1       2
      2      24
      3      89
      4     197
      5     396
      6     646
      7     871
      8    1086
      9    1171
     10    1223
     11    1080
     12     905
     13     722
     14     530
     15     335
     16     242
     17     118
     18      75
     19      48
     20      25
     21       9
     22       4
     23       3
     24       0
     25       0
     26       0
     27       1
Stats complete.
Testing completed OK

APPENDIX B
weill % ./words dict3 41879
Reading words from dict3
Hash Table Stats:
Number of slots = 41879
Number of items = 98099
Chains
 Length    Freq
Max chain length:10
      0    4105
      1    9438
      2   10914
      3    8631
      4    5013
      5    2359
      6     989
      7     315
      8      85
      9      26
     10       4
Stats complete.
Testing completed OK

APPENDIX C
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 75.08      0.12     0.12   196202     0.00     0.00  hash
  6.26      0.13     0.01    98103     0.00     0.00  HashTableSearch
  6.26      0.14     0.01    98103     0.00     0.00  ListSearch
  6.26      0.15     0.01    15847     0.00     0.00  ListLength
  6.26      0.16     0.01     7919     0.00     0.00  dropList
  0.00      0.16     0.00   900498     0.00     0.00  cmp
  0.00      0.16     0.00   196200     0.00     0.00  ItemGet
  0.00      0.16     0.00   196198     0.00     0.00  dropItem
  0.00      0.16     0.00   196198     0.00     0.00  newItem
  0.00      0.16     0.00    98099     0.00     0.00  HashTableInsert
  0.00      0.16     0.00    98099     0.00     0.00  ListInsert
  0.00      0.16     0.00     7919     0.00     0.00  newList
  0.00      0.16     0.00        1     0.00    10.01  HashTableStats
  0.00      0.16     0.00        1     0.00    10.01  dropHashTable
  0.00      0.16     0.00        1     0.00     0.00  newHashTable

APPENDIX D
// convert key into index (from Sedgewick)
unsigned int hash(Key k, int tableSize)
{
    unsigned int h = 0;
    int a = 31415, b = 27183;
    for (k = k; *k != '\0'; k++) {
        a = a*b % (tableSize-1);
        h = (a*h + *k) % tableSize;
    }
    return (h % tableSize);
}

APPENDIX E

// convert key into index (from Sedgewick)
unsigned int hash(Key k, int tableSize)
{
    unsigned int h = 0;
    int a = 31415, b = 27183;
    for (k = k; *k != '\0'; k++) {
        h = (a*h + *k) % tableSize;
    }
    return (h % tableSize);
}

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 33.37      0.04     0.04   196202     0.00     0.00  hash
 25.03      0.07     0.03    98103     0.00     0.00  ListSearch
 16.68      0.09     0.02                             main
 12.51      0.11     0.02   196200     0.00     0.00  ItemGet
  8.34      0.12     0.01    15847     0.00     0.00  ListLength
  4.17      0.12     0.01                             ItemShow
  0.00      0.12     0.00   900498     0.00     0.00  cmp
  0.00      0.12     0.00   196198     0.00     0.00  dropItem
  0.00      0.12     0.00   196198     0.00     0.00  newItem
  0.00      0.12     0.00    98103     0.00     0.00  HashTableSearch
  0.00      0.12     0.00    98099     0.00     0.00  HashTableInsert
  0.00      0.12     0.00    98099     0.00     0.00  ListInsert
  0.00      0.12     0.00     7919     0.00     0.00  dropList
  0.00      0.12     0.00     7919     0.00     0.00  newList
  0.00      0.12     0.00        1     0.00    10.01  HashTableStats
  0.00      0.12     0.00        1     0.00     0.00  dropHashTable
  0.00      0.12     0.00        1     0.00     0.00  newHashTable
